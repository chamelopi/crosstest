1. Create toolchain file for mingw

    # the name of the target operating system
    SET(CMAKE_SYSTEM_NAME Windows)

    # which compilers to use for C and C++
    SET(CMAKE_C_COMPILER x86_x64-w64-mingw-gcc)
    SET(CMAKE_CXX_COMPILER x86_x64-w64-mingw-g++)

    # here is the target environment located (add directory for user-built libararies
    SET(CMAKE_FIND_ROOT_PATH  /usr/x86_x64-w64-mingw)

    # adjust the default behaviour of the FIND_XXX() commands:
    # search headers and libraries in the target environment, search
    # programs in the host environment
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

2. Create CMakeLists.txt for root directory, pointing to subdirectory src

    project(PROJECT_NAME_HERE)
    add_subdirectory(src)

3. Create CMakeLists.txt for src directory, building the actual code
    
    Important: Link libraries statically (at least for Windows)

    add_library(C codeC.cpp)
    add_executable(exec codeA.cpp codeB.cpp)
    target_link_libraries(exec C)

4. Create build script to automate cmake + make process, as well as creating & deleting build directories

    # Would look something like this for each platform:
    mkdir -p build_$platform
    cd build_$platform
    cmake .. -DCMAKE_TOOLCHAIN_FILE=../$platform-toolchain.cmake && make
    cd ..
